
TIMER_UP_DOWN_COUNTER_GPIO_toggle_BAREMETAL3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005c0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000754  08000754  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000754  08000754  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000754  08000754  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000754  08000754  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000754  08000754  00010754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000758  08000758  00010758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800075c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  2000000c  08000768  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000768  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002aa7  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000009e7  00000000  00000000  00022b26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002b8  00000000  00000000  00023510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001ef  00000000  00000000  000237c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000ed8f  00000000  00000000  000239b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002f1b  00000000  00000000  00032746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007c011  00000000  00000000  00035661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000974  00000000  00000000  000b1674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  000b1fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800073c 	.word	0x0800073c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800073c 	.word	0x0800073c

080001d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001d8:	4b06      	ldr	r3, [pc, #24]	; (80001f4 <SystemInit+0x20>)
 80001da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001de:	4a05      	ldr	r2, [pc, #20]	; (80001f4 <SystemInit+0x20>)
 80001e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80001e8:	bf00      	nop
 80001ea:	46bd      	mov	sp, r7
 80001ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	e000ed00 	.word	0xe000ed00

080001f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80001fc:	4b0e      	ldr	r3, [pc, #56]	; (8000238 <HAL_Init+0x40>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a0d      	ldr	r2, [pc, #52]	; (8000238 <HAL_Init+0x40>)
 8000202:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000206:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000208:	4b0b      	ldr	r3, [pc, #44]	; (8000238 <HAL_Init+0x40>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a0a      	ldr	r2, [pc, #40]	; (8000238 <HAL_Init+0x40>)
 800020e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000212:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000214:	4b08      	ldr	r3, [pc, #32]	; (8000238 <HAL_Init+0x40>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a07      	ldr	r2, [pc, #28]	; (8000238 <HAL_Init+0x40>)
 800021a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800021e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000220:	2003      	movs	r0, #3
 8000222:	f000 f90b 	bl	800043c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000226:	200f      	movs	r0, #15
 8000228:	f000 f808 	bl	800023c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800022c:	f000 fa10 	bl	8000650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000230:	2300      	movs	r3, #0
}
 8000232:	4618      	mov	r0, r3
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	40023c00 	.word	0x40023c00

0800023c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000244:	4b12      	ldr	r3, [pc, #72]	; (8000290 <HAL_InitTick+0x54>)
 8000246:	681a      	ldr	r2, [r3, #0]
 8000248:	4b12      	ldr	r3, [pc, #72]	; (8000294 <HAL_InitTick+0x58>)
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	4619      	mov	r1, r3
 800024e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000252:	fbb3 f3f1 	udiv	r3, r3, r1
 8000256:	fbb2 f3f3 	udiv	r3, r2, r3
 800025a:	4618      	mov	r0, r3
 800025c:	f000 f923 	bl	80004a6 <HAL_SYSTICK_Config>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000266:	2301      	movs	r3, #1
 8000268:	e00e      	b.n	8000288 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	2b0f      	cmp	r3, #15
 800026e:	d80a      	bhi.n	8000286 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000270:	2200      	movs	r2, #0
 8000272:	6879      	ldr	r1, [r7, #4]
 8000274:	f04f 30ff 	mov.w	r0, #4294967295
 8000278:	f000 f8eb 	bl	8000452 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800027c:	4a06      	ldr	r2, [pc, #24]	; (8000298 <HAL_InitTick+0x5c>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000282:	2300      	movs	r3, #0
 8000284:	e000      	b.n	8000288 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000286:	2301      	movs	r3, #1
}
 8000288:	4618      	mov	r0, r3
 800028a:	3708      	adds	r7, #8
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	20000000 	.word	0x20000000
 8000294:	20000008 	.word	0x20000008
 8000298:	20000004 	.word	0x20000004

0800029c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800029c:	b480      	push	{r7}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	f003 0307 	and.w	r3, r3, #7
 80002aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002ac:	4b0c      	ldr	r3, [pc, #48]	; (80002e0 <__NVIC_SetPriorityGrouping+0x44>)
 80002ae:	68db      	ldr	r3, [r3, #12]
 80002b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002b2:	68ba      	ldr	r2, [r7, #8]
 80002b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002b8:	4013      	ands	r3, r2
 80002ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002c0:	68bb      	ldr	r3, [r7, #8]
 80002c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002ce:	4a04      	ldr	r2, [pc, #16]	; (80002e0 <__NVIC_SetPriorityGrouping+0x44>)
 80002d0:	68bb      	ldr	r3, [r7, #8]
 80002d2:	60d3      	str	r3, [r2, #12]
}
 80002d4:	bf00      	nop
 80002d6:	3714      	adds	r7, #20
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr
 80002e0:	e000ed00 	.word	0xe000ed00

080002e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002e8:	4b04      	ldr	r3, [pc, #16]	; (80002fc <__NVIC_GetPriorityGrouping+0x18>)
 80002ea:	68db      	ldr	r3, [r3, #12]
 80002ec:	0a1b      	lsrs	r3, r3, #8
 80002ee:	f003 0307 	and.w	r3, r3, #7
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	46bd      	mov	sp, r7
 80002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fa:	4770      	bx	lr
 80002fc:	e000ed00 	.word	0xe000ed00

08000300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	4603      	mov	r3, r0
 8000308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800030a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030e:	2b00      	cmp	r3, #0
 8000310:	db0b      	blt.n	800032a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	f003 021f 	and.w	r2, r3, #31
 8000318:	4907      	ldr	r1, [pc, #28]	; (8000338 <__NVIC_EnableIRQ+0x38>)
 800031a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031e:	095b      	lsrs	r3, r3, #5
 8000320:	2001      	movs	r0, #1
 8000322:	fa00 f202 	lsl.w	r2, r0, r2
 8000326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800032a:	bf00      	nop
 800032c:	370c      	adds	r7, #12
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	e000e100 	.word	0xe000e100

0800033c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	4603      	mov	r3, r0
 8000344:	6039      	str	r1, [r7, #0]
 8000346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800034c:	2b00      	cmp	r3, #0
 800034e:	db0a      	blt.n	8000366 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	b2da      	uxtb	r2, r3
 8000354:	490c      	ldr	r1, [pc, #48]	; (8000388 <__NVIC_SetPriority+0x4c>)
 8000356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800035a:	0112      	lsls	r2, r2, #4
 800035c:	b2d2      	uxtb	r2, r2
 800035e:	440b      	add	r3, r1
 8000360:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000364:	e00a      	b.n	800037c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000366:	683b      	ldr	r3, [r7, #0]
 8000368:	b2da      	uxtb	r2, r3
 800036a:	4908      	ldr	r1, [pc, #32]	; (800038c <__NVIC_SetPriority+0x50>)
 800036c:	79fb      	ldrb	r3, [r7, #7]
 800036e:	f003 030f 	and.w	r3, r3, #15
 8000372:	3b04      	subs	r3, #4
 8000374:	0112      	lsls	r2, r2, #4
 8000376:	b2d2      	uxtb	r2, r2
 8000378:	440b      	add	r3, r1
 800037a:	761a      	strb	r2, [r3, #24]
}
 800037c:	bf00      	nop
 800037e:	370c      	adds	r7, #12
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr
 8000388:	e000e100 	.word	0xe000e100
 800038c:	e000ed00 	.word	0xe000ed00

08000390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000390:	b480      	push	{r7}
 8000392:	b089      	sub	sp, #36	; 0x24
 8000394:	af00      	add	r7, sp, #0
 8000396:	60f8      	str	r0, [r7, #12]
 8000398:	60b9      	str	r1, [r7, #8]
 800039a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	f003 0307 	and.w	r3, r3, #7
 80003a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003a4:	69fb      	ldr	r3, [r7, #28]
 80003a6:	f1c3 0307 	rsb	r3, r3, #7
 80003aa:	2b04      	cmp	r3, #4
 80003ac:	bf28      	it	cs
 80003ae:	2304      	movcs	r3, #4
 80003b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003b2:	69fb      	ldr	r3, [r7, #28]
 80003b4:	3304      	adds	r3, #4
 80003b6:	2b06      	cmp	r3, #6
 80003b8:	d902      	bls.n	80003c0 <NVIC_EncodePriority+0x30>
 80003ba:	69fb      	ldr	r3, [r7, #28]
 80003bc:	3b03      	subs	r3, #3
 80003be:	e000      	b.n	80003c2 <NVIC_EncodePriority+0x32>
 80003c0:	2300      	movs	r3, #0
 80003c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003c4:	f04f 32ff 	mov.w	r2, #4294967295
 80003c8:	69bb      	ldr	r3, [r7, #24]
 80003ca:	fa02 f303 	lsl.w	r3, r2, r3
 80003ce:	43da      	mvns	r2, r3
 80003d0:	68bb      	ldr	r3, [r7, #8]
 80003d2:	401a      	ands	r2, r3
 80003d4:	697b      	ldr	r3, [r7, #20]
 80003d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003d8:	f04f 31ff 	mov.w	r1, #4294967295
 80003dc:	697b      	ldr	r3, [r7, #20]
 80003de:	fa01 f303 	lsl.w	r3, r1, r3
 80003e2:	43d9      	mvns	r1, r3
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003e8:	4313      	orrs	r3, r2
         );
}
 80003ea:	4618      	mov	r0, r3
 80003ec:	3724      	adds	r7, #36	; 0x24
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
	...

080003f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	3b01      	subs	r3, #1
 8000404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000408:	d301      	bcc.n	800040e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800040a:	2301      	movs	r3, #1
 800040c:	e00f      	b.n	800042e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800040e:	4a0a      	ldr	r2, [pc, #40]	; (8000438 <SysTick_Config+0x40>)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	3b01      	subs	r3, #1
 8000414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000416:	210f      	movs	r1, #15
 8000418:	f04f 30ff 	mov.w	r0, #4294967295
 800041c:	f7ff ff8e 	bl	800033c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000420:	4b05      	ldr	r3, [pc, #20]	; (8000438 <SysTick_Config+0x40>)
 8000422:	2200      	movs	r2, #0
 8000424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000426:	4b04      	ldr	r3, [pc, #16]	; (8000438 <SysTick_Config+0x40>)
 8000428:	2207      	movs	r2, #7
 800042a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800042c:	2300      	movs	r3, #0
}
 800042e:	4618      	mov	r0, r3
 8000430:	3708      	adds	r7, #8
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	e000e010 	.word	0xe000e010

0800043c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000444:	6878      	ldr	r0, [r7, #4]
 8000446:	f7ff ff29 	bl	800029c <__NVIC_SetPriorityGrouping>
}
 800044a:	bf00      	nop
 800044c:	3708      	adds	r7, #8
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}

08000452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000452:	b580      	push	{r7, lr}
 8000454:	b086      	sub	sp, #24
 8000456:	af00      	add	r7, sp, #0
 8000458:	4603      	mov	r3, r0
 800045a:	60b9      	str	r1, [r7, #8]
 800045c:	607a      	str	r2, [r7, #4]
 800045e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000460:	2300      	movs	r3, #0
 8000462:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000464:	f7ff ff3e 	bl	80002e4 <__NVIC_GetPriorityGrouping>
 8000468:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800046a:	687a      	ldr	r2, [r7, #4]
 800046c:	68b9      	ldr	r1, [r7, #8]
 800046e:	6978      	ldr	r0, [r7, #20]
 8000470:	f7ff ff8e 	bl	8000390 <NVIC_EncodePriority>
 8000474:	4602      	mov	r2, r0
 8000476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800047a:	4611      	mov	r1, r2
 800047c:	4618      	mov	r0, r3
 800047e:	f7ff ff5d 	bl	800033c <__NVIC_SetPriority>
}
 8000482:	bf00      	nop
 8000484:	3718      	adds	r7, #24
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}

0800048a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800048a:	b580      	push	{r7, lr}
 800048c:	b082      	sub	sp, #8
 800048e:	af00      	add	r7, sp, #0
 8000490:	4603      	mov	r3, r0
 8000492:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000498:	4618      	mov	r0, r3
 800049a:	f7ff ff31 	bl	8000300 <__NVIC_EnableIRQ>
}
 800049e:	bf00      	nop
 80004a0:	3708      	adds	r7, #8
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}

080004a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004a6:	b580      	push	{r7, lr}
 80004a8:	b082      	sub	sp, #8
 80004aa:	af00      	add	r7, sp, #0
 80004ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004ae:	6878      	ldr	r0, [r7, #4]
 80004b0:	f7ff ffa2 	bl	80003f8 <SysTick_Config>
 80004b4:	4603      	mov	r3, r0
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	3708      	adds	r7, #8
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
	...

080004c0 <main>:
#define PLLSRC 22
#define PLLP   16
#define PLLN   6
#define PLLM   0

int main(){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0


	HAL_Init();
 80004c6:	f7ff fe97 	bl	80001f8 <HAL_Init>
	SystemClockConfig();
 80004ca:	f000 f8b9 	bl	8000640 <SystemClockConfig>
	uint32_t tempreg;

	/*Enable HSE and wait for it to be statble, later it will be used by PLL*/
	RCC->CR |= (1<<HSEON);
 80004ce:	4b48      	ldr	r3, [pc, #288]	; (80005f0 <main+0x130>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a47      	ldr	r2, [pc, #284]	; (80005f0 <main+0x130>)
 80004d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004d8:	6013      	str	r3, [r2, #0]
	while((RCC->CR & (1<<HSERDY))== 0x00);
 80004da:	bf00      	nop
 80004dc:	4b44      	ldr	r3, [pc, #272]	; (80005f0 <main+0x130>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d0f9      	beq.n	80004dc <main+0x1c>
		 * 2.Confgiure paramters to generate 84Mhz
		 * 3.Enable PLL
		 * Wait for PLL to get stable*/

	/*1.1  Select source for PLL selecting HSE*/
	RCC->PLLCFGR |= (1<<PLLSRC) ;
 80004e8:	4b41      	ldr	r3, [pc, #260]	; (80005f0 <main+0x130>)
 80004ea:	685b      	ldr	r3, [r3, #4]
 80004ec:	4a40      	ldr	r2, [pc, #256]	; (80005f0 <main+0x130>)
 80004ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004f2:	6053      	str	r3, [r2, #4]
	 * TO get 84Mhz
	 * Input frequency must be less than 2Mhz, hence M = 12
	 * The VCO output frequency must be between 192 and 432 Mhz setting N=252
	 * To make PLL output less than 84 mhz then P =3
	 * */
	tempreg=RCC->PLLCFGR;
 80004f4:	4b3e      	ldr	r3, [pc, #248]	; (80005f0 <main+0x130>)
 80004f6:	685b      	ldr	r3, [r3, #4]
 80004f8:	607b      	str	r3, [r7, #4]
	tempreg &= ~((0x3<<PLLP)|(0x1FF<<PLLN)|(0x3F<<PLLM));
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	4b3d      	ldr	r3, [pc, #244]	; (80005f4 <main+0x134>)
 80004fe:	4013      	ands	r3, r2
 8000500:	607b      	str	r3, [r7, #4]
	RCC->PLLCFGR |= ((12<<PLLM)|(252<<PLLN)|(3<<PLLP));
 8000502:	4b3b      	ldr	r3, [pc, #236]	; (80005f0 <main+0x130>)
 8000504:	685b      	ldr	r3, [r3, #4]
 8000506:	4a3a      	ldr	r2, [pc, #232]	; (80005f0 <main+0x130>)
 8000508:	f443 334f 	orr.w	r3, r3, #211968	; 0x33c00
 800050c:	f443 7343 	orr.w	r3, r3, #780	; 0x30c
 8000510:	6053      	str	r3, [r2, #4]

	/*1.3 Enable PLL*/
		RCC->CR |= (1<<PLLON);
 8000512:	4b37      	ldr	r3, [pc, #220]	; (80005f0 <main+0x130>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a36      	ldr	r2, [pc, #216]	; (80005f0 <main+0x130>)
 8000518:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800051c:	6013      	str	r3, [r2, #0]
		while((RCC->CR & (1<<PLLRDY))==0);
 800051e:	bf00      	nop
 8000520:	4b33      	ldr	r3, [pc, #204]	; (80005f0 <main+0x130>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000528:	2b00      	cmp	r3, #0
 800052a:	d0f9      	beq.n	8000520 <main+0x60>

/**********************************************************************************************/
	/*Connect Core to PLL*/
		RCC->CFGR &= ~(0x3<<0);
 800052c:	4b30      	ldr	r3, [pc, #192]	; (80005f0 <main+0x130>)
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	4a2f      	ldr	r2, [pc, #188]	; (80005f0 <main+0x130>)
 8000532:	f023 0303 	bic.w	r3, r3, #3
 8000536:	6093      	str	r3, [r2, #8]
		RCC->CFGR |=(1<<1);
 8000538:	4b2d      	ldr	r3, [pc, #180]	; (80005f0 <main+0x130>)
 800053a:	689b      	ldr	r3, [r3, #8]
 800053c:	4a2c      	ldr	r2, [pc, #176]	; (80005f0 <main+0x130>)
 800053e:	f043 0302 	orr.w	r3, r3, #2
 8000542:	6093      	str	r3, [r2, #8]
		while(((RCC->CFGR >>2) & 0X3)!= 0x2);   //waiting it to be stable
 8000544:	bf00      	nop
 8000546:	4b2a      	ldr	r3, [pc, #168]	; (80005f0 <main+0x130>)
 8000548:	689b      	ldr	r3, [r3, #8]
 800054a:	089b      	lsrs	r3, r3, #2
 800054c:	f003 0303 	and.w	r3, r3, #3
 8000550:	2b02      	cmp	r3, #2
 8000552:	d1f8      	bne.n	8000546 <main+0x86>

	/*Configure the root clock to APB domain
	 * Select clock source for AHB
	 * Configre APB prescaler
	 * */
	RCC->CFGR &= ~(0xF<<4);  //84Mhz
 8000554:	4b26      	ldr	r3, [pc, #152]	; (80005f0 <main+0x130>)
 8000556:	689b      	ldr	r3, [r3, #8]
 8000558:	4a25      	ldr	r2, [pc, #148]	; (80005f0 <main+0x130>)
 800055a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800055e:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~((7<<10)|(7<<13));
 8000560:	4b23      	ldr	r3, [pc, #140]	; (80005f0 <main+0x130>)
 8000562:	689b      	ldr	r3, [r3, #8]
 8000564:	4a22      	ldr	r2, [pc, #136]	; (80005f0 <main+0x130>)
 8000566:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 800056a:	6093      	str	r3, [r2, #8]

	RCC->CFGR |= (3<<10);    //AP1 div4
 800056c:	4b20      	ldr	r3, [pc, #128]	; (80005f0 <main+0x130>)
 800056e:	689b      	ldr	r3, [r3, #8]
 8000570:	4a1f      	ldr	r2, [pc, #124]	; (80005f0 <main+0x130>)
 8000572:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000576:	6093      	str	r3, [r2, #8]

	/*Enable CLock to timer peripheral*/
	RCC->APB2ENR |=(1<<0);
 8000578:	4b1d      	ldr	r3, [pc, #116]	; (80005f0 <main+0x130>)
 800057a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800057c:	4a1c      	ldr	r2, [pc, #112]	; (80005f0 <main+0x130>)
 800057e:	f043 0301 	orr.w	r3, r3, #1
 8000582:	6453      	str	r3, [r2, #68]	; 0x44

	/*Enable clock to GPIO peripheral*/
	RCC->AHB1ENR|= (1<<0);
 8000584:	4b1a      	ldr	r3, [pc, #104]	; (80005f0 <main+0x130>)
 8000586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000588:	4a19      	ldr	r2, [pc, #100]	; (80005f0 <main+0x130>)
 800058a:	f043 0301 	orr.w	r3, r3, #1
 800058e:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER &= ~(3<<10);
 8000590:	4b19      	ldr	r3, [pc, #100]	; (80005f8 <main+0x138>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a18      	ldr	r2, [pc, #96]	; (80005f8 <main+0x138>)
 8000596:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800059a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1<<10);
 800059c:	4b16      	ldr	r3, [pc, #88]	; (80005f8 <main+0x138>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a15      	ldr	r2, [pc, #84]	; (80005f8 <main+0x138>)
 80005a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005a6:	6013      	str	r3, [r2, #0]

	/*COnfgure clock to timer peripheral
	 * Timer would be recieving a clock of 6Mhz,setting the presclar to
	 * i.e setting prescaler to 239
	 * */
	TIM1->PSC = 24000;
 80005a8:	4b14      	ldr	r3, [pc, #80]	; (80005fc <main+0x13c>)
 80005aa:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 80005ae:	629a      	str	r2, [r3, #40]	; 0x28


	DBGMCU->APB2FZ |= (1<<0);   //timer will freeze when under debug mode
 80005b0:	4b13      	ldr	r3, [pc, #76]	; (8000600 <main+0x140>)
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	4a12      	ldr	r2, [pc, #72]	; (8000600 <main+0x140>)
 80005b6:	f043 0301 	orr.w	r3, r3, #1
 80005ba:	60d3      	str	r3, [r2, #12]

	/*Timer specific configuration*/
	TIM1->ARR =1000; 				 /*Number upto which the counter must count*/
 80005bc:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <main+0x13c>)
 80005be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005c2:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->CR1 |= ((1<<7)|(1<<2)|(1<<4)); 		//ENABLE AUTO PRELOAD and update event on overflow down counter
 80005c4:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <main+0x13c>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a0c      	ldr	r2, [pc, #48]	; (80005fc <main+0x13c>)
 80005ca:	f043 0394 	orr.w	r3, r3, #148	; 0x94
 80005ce:	6013      	str	r3, [r2, #0]

	TIM1->DIER |= (1<<0);
 80005d0:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <main+0x13c>)
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	4a09      	ldr	r2, [pc, #36]	; (80005fc <main+0x13c>)
 80005d6:	f043 0301 	orr.w	r3, r3, #1
 80005da:	60d3      	str	r3, [r2, #12]



	/*Interrupt configurations*/
		//Enable NVIC
	HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80005dc:	2019      	movs	r0, #25
 80005de:	f7ff ff54 	bl	800048a <HAL_NVIC_EnableIRQ>



	TIM1->CR1|= (1<<0);  //ENABLE THE TIMER
 80005e2:	4b06      	ldr	r3, [pc, #24]	; (80005fc <main+0x13c>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a05      	ldr	r2, [pc, #20]	; (80005fc <main+0x13c>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6013      	str	r3, [r2, #0]
	while(1){
 80005ee:	e7fe      	b.n	80005ee <main+0x12e>
 80005f0:	40023800 	.word	0x40023800
 80005f4:	fffc8000 	.word	0xfffc8000
 80005f8:	40020000 	.word	0x40020000
 80005fc:	40010000 	.word	0x40010000
 8000600:	e0042000 	.word	0xe0042000

08000604 <TIM1_UP_TIM10_IRQHandler>:

}



void TIM1_UP_TIM10_IRQHandler(void){
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0

	static int32_t i;
	if((TIM1->SR &0x01)==1){
 8000608:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <TIM1_UP_TIM10_IRQHandler+0x34>)
 800060a:	691b      	ldr	r3, [r3, #16]
 800060c:	f003 0301 	and.w	r3, r3, #1
 8000610:	2b01      	cmp	r3, #1
 8000612:	d10b      	bne.n	800062c <TIM1_UP_TIM10_IRQHandler+0x28>


		GPIOA->ODR ^= (1<<5);
 8000614:	4b09      	ldr	r3, [pc, #36]	; (800063c <TIM1_UP_TIM10_IRQHandler+0x38>)
 8000616:	695b      	ldr	r3, [r3, #20]
 8000618:	4a08      	ldr	r2, [pc, #32]	; (800063c <TIM1_UP_TIM10_IRQHandler+0x38>)
 800061a:	f083 0320 	eor.w	r3, r3, #32
 800061e:	6153      	str	r3, [r2, #20]
		TIM1->SR&= ~(1);
 8000620:	4b05      	ldr	r3, [pc, #20]	; (8000638 <TIM1_UP_TIM10_IRQHandler+0x34>)
 8000622:	691b      	ldr	r3, [r3, #16]
 8000624:	4a04      	ldr	r2, [pc, #16]	; (8000638 <TIM1_UP_TIM10_IRQHandler+0x34>)
 8000626:	f023 0301 	bic.w	r3, r3, #1
 800062a:	6113      	str	r3, [r2, #16]
	}

}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	40010000 	.word	0x40010000
 800063c:	40020000 	.word	0x40020000

08000640 <SystemClockConfig>:
void SystemClockConfig(){
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0



}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
	...

08000650 <HAL_MspInit>:
 *      Author: Newton Nadar
 */

#include "stm32f4xx_hal.h"
#include "core_cm4.h"
void HAL_MspInit(){
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0

	//Set priority grouping of the processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000654:	2003      	movs	r0, #3
 8000656:	f7ff fef1 	bl	800043c <HAL_NVIC_SetPriorityGrouping>

	//Enable all system exections
	//hardfault,usage fault, busfault

	SCB->SHCSR |= (0x7<<16);
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <HAL_MspInit+0x4c>)
 800065c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800065e:	4a0f      	ldr	r2, [pc, #60]	; (800069c <HAL_MspInit+0x4c>)
 8000660:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000664:	6253      	str	r3, [r2, #36]	; 0x24

	//Set priority
	HAL_NVIC_SetPriority(NonMaskableInt_IRQn,0,0);
 8000666:	2200      	movs	r2, #0
 8000668:	2100      	movs	r1, #0
 800066a:	f06f 000d 	mvn.w	r0, #13
 800066e:	f7ff fef0 	bl	8000452 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8000672:	2200      	movs	r2, #0
 8000674:	2100      	movs	r1, #0
 8000676:	f06f 000b 	mvn.w	r0, #11
 800067a:	f7ff feea 	bl	8000452 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 800067e:	2200      	movs	r2, #0
 8000680:	2100      	movs	r1, #0
 8000682:	f06f 000a 	mvn.w	r0, #10
 8000686:	f7ff fee4 	bl	8000452 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 800068a:	2200      	movs	r2, #0
 800068c:	2100      	movs	r1, #0
 800068e:	f06f 0009 	mvn.w	r0, #9
 8000692:	f7ff fede 	bl	8000452 <HAL_NVIC_SetPriority>


}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006a0:	480d      	ldr	r0, [pc, #52]	; (80006d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006a4:	f7ff fd96 	bl	80001d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a8:	480c      	ldr	r0, [pc, #48]	; (80006dc <LoopForever+0x6>)
  ldr r1, =_edata
 80006aa:	490d      	ldr	r1, [pc, #52]	; (80006e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006ac:	4a0d      	ldr	r2, [pc, #52]	; (80006e4 <LoopForever+0xe>)
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b0:	e002      	b.n	80006b8 <LoopCopyDataInit>

080006b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b6:	3304      	adds	r3, #4

080006b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006bc:	d3f9      	bcc.n	80006b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006be:	4a0a      	ldr	r2, [pc, #40]	; (80006e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006c0:	4c0a      	ldr	r4, [pc, #40]	; (80006ec <LoopForever+0x16>)
  movs r3, #0
 80006c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c4:	e001      	b.n	80006ca <LoopFillZerobss>

080006c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c8:	3204      	adds	r2, #4

080006ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006cc:	d3fb      	bcc.n	80006c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006ce:	f000 f811 	bl	80006f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006d2:	f7ff fef5 	bl	80004c0 <main>

080006d6 <LoopForever>:

LoopForever:
  b LoopForever
 80006d6:	e7fe      	b.n	80006d6 <LoopForever>
  ldr   r0, =_estack
 80006d8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80006dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006e4:	0800075c 	.word	0x0800075c
  ldr r2, =_sbss
 80006e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006ec:	20000028 	.word	0x20000028

080006f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006f0:	e7fe      	b.n	80006f0 <ADC_IRQHandler>
	...

080006f4 <__libc_init_array>:
 80006f4:	b570      	push	{r4, r5, r6, lr}
 80006f6:	4d0d      	ldr	r5, [pc, #52]	; (800072c <__libc_init_array+0x38>)
 80006f8:	4c0d      	ldr	r4, [pc, #52]	; (8000730 <__libc_init_array+0x3c>)
 80006fa:	1b64      	subs	r4, r4, r5
 80006fc:	10a4      	asrs	r4, r4, #2
 80006fe:	2600      	movs	r6, #0
 8000700:	42a6      	cmp	r6, r4
 8000702:	d109      	bne.n	8000718 <__libc_init_array+0x24>
 8000704:	4d0b      	ldr	r5, [pc, #44]	; (8000734 <__libc_init_array+0x40>)
 8000706:	4c0c      	ldr	r4, [pc, #48]	; (8000738 <__libc_init_array+0x44>)
 8000708:	f000 f818 	bl	800073c <_init>
 800070c:	1b64      	subs	r4, r4, r5
 800070e:	10a4      	asrs	r4, r4, #2
 8000710:	2600      	movs	r6, #0
 8000712:	42a6      	cmp	r6, r4
 8000714:	d105      	bne.n	8000722 <__libc_init_array+0x2e>
 8000716:	bd70      	pop	{r4, r5, r6, pc}
 8000718:	f855 3b04 	ldr.w	r3, [r5], #4
 800071c:	4798      	blx	r3
 800071e:	3601      	adds	r6, #1
 8000720:	e7ee      	b.n	8000700 <__libc_init_array+0xc>
 8000722:	f855 3b04 	ldr.w	r3, [r5], #4
 8000726:	4798      	blx	r3
 8000728:	3601      	adds	r6, #1
 800072a:	e7f2      	b.n	8000712 <__libc_init_array+0x1e>
 800072c:	08000754 	.word	0x08000754
 8000730:	08000754 	.word	0x08000754
 8000734:	08000754 	.word	0x08000754
 8000738:	08000758 	.word	0x08000758

0800073c <_init>:
 800073c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800073e:	bf00      	nop
 8000740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000742:	bc08      	pop	{r3}
 8000744:	469e      	mov	lr, r3
 8000746:	4770      	bx	lr

08000748 <_fini>:
 8000748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800074a:	bf00      	nop
 800074c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800074e:	bc08      	pop	{r3}
 8000750:	469e      	mov	lr, r3
 8000752:	4770      	bx	lr
